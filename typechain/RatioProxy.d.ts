/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RatioProxyInterface extends ethers.utils.Interface {
  functions: {
    "changeHypervisor(address)": FunctionFragment;
    "deposit(uint256,uint256,address)": FunctionFragment;
    "depositDelta()": FunctionFragment;
    "freeDeposit()": FunctionFragment;
    "getDepositAmount(address,uint256)": FunctionFragment;
    "pos()": FunctionFragment;
    "properDepositRatio(uint256,uint256)": FunctionFragment;
    "setDepositDelta(uint256)": FunctionFragment;
    "toggleDepositFree()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeHypervisor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "properDepositRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDepositFree",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeHypervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "properDepositRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDepositFree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class RatioProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RatioProxyInterface;

  functions: {
    changeHypervisor(
      _pos: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    freeDeposit(overrides?: CallOverrides): Promise<[boolean]>;

    getDepositAmount(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountStart: BigNumber; amountEnd: BigNumber }
    >;

    pos(overrides?: CallOverrides): Promise<[string]>;

    properDepositRatio(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDepositDelta(
      _depositDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleDepositFree(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeHypervisor(
    _pos: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    deposit0: BigNumberish,
    deposit1: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDelta(overrides?: CallOverrides): Promise<BigNumber>;

  freeDeposit(overrides?: CallOverrides): Promise<boolean>;

  getDepositAmount(
    token: string,
    deposit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountStart: BigNumber; amountEnd: BigNumber }
  >;

  pos(overrides?: CallOverrides): Promise<string>;

  properDepositRatio(
    deposit0: BigNumberish,
    deposit1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDepositDelta(
    _depositDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleDepositFree(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeHypervisor(_pos: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositDelta(overrides?: CallOverrides): Promise<BigNumber>;

    freeDeposit(overrides?: CallOverrides): Promise<boolean>;

    getDepositAmount(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountStart: BigNumber; amountEnd: BigNumber }
    >;

    pos(overrides?: CallOverrides): Promise<string>;

    properDepositRatio(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDepositDelta(
      _depositDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleDepositFree(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    changeHypervisor(
      _pos: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDelta(overrides?: CallOverrides): Promise<BigNumber>;

    freeDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositAmount(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pos(overrides?: CallOverrides): Promise<BigNumber>;

    properDepositRatio(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositDelta(
      _depositDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleDepositFree(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeHypervisor(
      _pos: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositAmount(
      token: string,
      deposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    properDepositRatio(
      deposit0: BigNumberish,
      deposit1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositDelta(
      _depositDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleDepositFree(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
